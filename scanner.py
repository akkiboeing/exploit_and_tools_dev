#!/usr/bin/python3

from termcolor import colored
from socket import *
import optparse
from threading import *

def connScan(TargetHost, TargetPorts):
    try:
        sock = socket(AF_INET, SOCK_STREAM)
        sock.connect((TargetHost,TargetPorts))
        banner = sock.recv(1024)
        print(colored("[+] {}/{} Open | Service : {}".format(TargetHost ,TargetPorts, banner), 'green'))
    except:
        print(colored("[-] %d/tcp Closed " %TargetPorts, 'red'))
    finally:
        sock.close()

def portScan(TargetHost, TargetPorts):
    try:
        tgthst = gethostbyname(TargetHost)
    except:
        print(colored('Can\'t resolve %s' %tgthst, 'red'))
    try:
        tgtname = gethostbyaddr(tgthst)
        print(colored("[*] Scan Results For: " + tgtname[0],'yellow'))
    except:
        print(colored("[*] Scan Results For: " + tgthst,'yellow'))        
    setdefaulttimeout(2)
    for TargetPorts in TargetPorts:
        t = Thread(target=connScan, args=(TargetHost, int(TargetPorts)))
        t.start()
            

def main():
    parser = optparse.OptionParser('Usage of the program: '+ './scanner -H <target host> -p <target port>')
    parser.add_option('-H', dest='TargetHost', type='string', help='specify target\'s IP address or domain name')
    parser.add_option('-p', dest='TargetPorts', type='string', help='specify target\'s ports separated by comma')
    (options, args) = parser.parse_args()
    TargetHost = options.TargetHost
    TargetPorts = str(options.TargetPorts).split(',')
    if((TargetHost == None) | (TargetPorts == None)):
       print (parser.usage)
       exit(0)
    portScan(TargetHost, TargetPorts)   

if __name__ == '__main__':    
   main()    
